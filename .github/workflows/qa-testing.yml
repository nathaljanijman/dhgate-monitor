name: 🧪 DHgate Monitor QA Testing

on:
  # Run daily at 6 AM UTC
  schedule:
    - cron: '0 6 * * *'
  
  # Run on push to main branch
  push:
    branches: [ main ]
  
  # Run on pull requests
  pull_request:
    branches: [ main ]
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - development
      send_email:
        description: 'Send email report'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  BASE_URL: ${{ github.event.inputs.environment == 'production' && 'https://dhgate-monitor.com' || 'http://localhost:3000' }}

jobs:
  qa-tests:
    name: 🧪 Run QA Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps ${{ matrix.browser }}
          
      - name: 🏗️ Start development server
        if: github.event.inputs.environment != 'production'
        run: |
          npm run dev &
          # Wait for server to be ready
          npx wait-on http://localhost:3000 --timeout 60000
        
      - name: 🧪 Run QA tests (${{ matrix.browser }})
        run: |
          npx playwright test --project=${{ matrix.browser }} \
            --reporter=html,junit \
            --output-dir=test-results/${{ matrix.browser }}
        env:
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
          CI: true
          
      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30
          
      - name: 📈 Publish test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: QA Test Results (${{ matrix.browser }})
          path: test-results/${{ matrix.browser }}/results.xml
          reporter: java-junit
          
  accessibility-audit:
    name: ♿ Accessibility Audit
    runs-on: ubuntu-latest
    needs: qa-tests
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: ♿ Run accessibility audit
        run: |
          npx playwright test tests/e2e/compliance/accessibility.test.js \
            --reporter=html,junit \
            --output-dir=accessibility-results
            
      - name: 📊 Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-audit
          path: accessibility-results/
          retention-days: 30
          
  performance-audit:
    name: ⚡ Performance Audit
    runs-on: ubuntu-latest
    needs: qa-tests
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: ⚡ Run performance audit
        run: |
          npx playwright test tests/e2e/performance/seo.test.js \
            --reporter=html,junit \
            --output-dir=performance-results
            
      - name: 🏃‍♂️ Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ env.BASE_URL }}/
            ${{ env.BASE_URL }}/service
            ${{ env.BASE_URL }}/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true
          
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: qa-tests
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate || exit 0
        continue-on-error: true
        
      - name: 🕷️ OWASP ZAP Scan
        if: github.event.inputs.environment == 'production'
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: ${{ env.BASE_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
  generate-report:
    name: 📊 Generate QA Report
    runs-on: ubuntu-latest
    needs: [qa-tests, accessibility-audit, performance-audit, security-scan]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: 📊 Generate comprehensive report
        run: |
          node tests/e2e/qa-runner.js --combine-results ./artifacts
        env:
          SEND_EMAIL_REPORTS: ${{ github.event.inputs.send_email || 'false' }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          REPORT_EMAIL: ${{ secrets.QA_REPORT_EMAIL }}
          
      - name: 📧 Send email report
        if: github.event.inputs.send_email == 'true' || github.event_name == 'schedule'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "🧪 DHgate Monitor QA Report - ${{ github.event_name == 'schedule' && 'Daily 06:00 UTC' || 'Manual' }} Run"
          to: nathaljanijman@hotmail.com
          from: DHgate Monitor QA <${{ secrets.SMTP_USER }}>
          html_body: file://qa-report.html
          attachments: |
            qa-report.html
            qa-report.json
            
      - name: 📊 Upload final report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: final-qa-report
          path: |
            qa-report.html
            qa-report.json
          retention-days: 90
          
      - name: 📈 Update QA status
        if: always()
        run: |
          echo "QA_STATUS=${{ job.status }}" >> $GITHUB_ENV
          echo "QA_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_ENV
          
  notify-teams:
    name: 📢 Notify Teams
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: always() && (github.event_name == 'schedule' || needs.generate-report.result == 'failure')
    
    steps:
      - name: 📢 Notify on failure
        if: needs.generate-report.result == 'failure' && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#qa-alerts'
          text: |
            🚨 DHgate Monitor QA Tests Failed
            
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Trigger: ${{ github.event_name }}
            Branch: ${{ github.ref_name }}
            
            Please check the GitHub Actions logs and fix critical issues immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: 📢 Daily status update
        if: github.event_name == 'schedule' && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.generate-report.result }}
          channel: '#qa-daily'
          text: |
            📊 Daily QA Report - DHgate Monitor
            
            Status: ${{ needs.generate-report.result == 'success' && '✅ All tests passed' || '❌ Some tests failed' }}
            Environment: Production
            Time: ${{ env.QA_TIMESTAMP }}
            
            Full report available in GitHub Actions artifacts.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}